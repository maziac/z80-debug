{
	"name": "dezog",
	"displayName": "DeZog",
	"version": "1.3.3",
	"publisher": "S0urceror",
	"description": "Visual Studio Code Debug Adapter for the Z80/ZX Spectrum.",
	"author": {
		"name": "Thomas Busse"
	},
	"license": "MIT",
	"keywords": [
		"debugger",
		"z80",
		"z80-debug",
		"dezog",
		"zesarux",
		"zx spectrum",
		"assembler"
	],
	"engines": {
		"vscode": "^1.35.1",
		"node": "^7.9.0"
	},
	"icon": "images/dezog-icon.png",
	"categories": [
		"Debuggers"
	],
	"private": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/maziac/dezog"
	},
	"scripts": {
		"compile": "tsc -p ./src",
		"tslint": "eslint ./src/**/*.ts",
		"watch": "tsc -w -p ./src",
		"test": "mocha -u tdd ./out/tests/",
		"preinstall": "npx npm-force-resolutions",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"package": "vsce package",
		"publish": "vsce publish"
	},
	"files": [],
	"dependencies": {
		"await-notify": "1.0.1",
		"binary-file": "^0.2.3",
		"gif-writer": "^0.9.3",
		"glob": "^7.1.6",
		"jsonc-parser": "^2.3.0",
		"mocha": "^7.2.0",
		"node-gzip": "^1.1.2",
		"rng": "^0.2.2",
		"ts-node": "^8.10.2",
		"vscode-debugadapter": "^1.41.1",
		"vscode-debugprotocol": "1.39.0",
		"xml2js": "^0.4.23"
	},
	"devDependencies": {
		"@types/mocha": "7.0.2",
		"@types/node": "13.9.5",
		"@types/xml2js": "^0.4.5",
		"electron-rebuild": "^1.11.0",
		"minimist": "^1.2.5",
		"tslint": "^6.1.2",
		"typescript": "3.8.3",
		"vsce": "1.74.0",
		"vscode": "^1.1.37",
		"vscode-debugadapter-testsupport": "1.40.2"
	},
	"resolutions": {
		"minimist": "^1.2.5"
	},
	"main": "./out/extension",
	"activationEvents": [
		"onDebug",
		"onCommand"
	],
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "DeZog configuration",
			"properties": {
				"dezog.logpanel": {
					"description": "Write global logs to an output panel.",
					"type": "boolean",
					"scope": "resource"
				},
				"dezog.logfile": {
					"description": "Write global logs to the given file.",
					"type": "string",
					"scope": "resource"
				},
				"dezog.socket.logpanel": {
					"description": "Write socket logs to an output panel.",
					"type": "boolean",
					"scope": "resource"
				},
				"dezog.socket.logfile": {
					"description": "Write socket logs to the given file.",
					"type": "string",
					"scope": "resource"
				}
			}
		},
		"languages": [
			{
				"id": "asm-collection",
				"extensions": [
					".list",
					".lis",
					".a80",
					".asm",
					".inc",
					".s"
				],
				"aliases": [
					"Assembler file"
				]
			}
		],
		"breakpoints": [
			{
				"language": "asm-collection"
			},
			{
				"language": "z80-macroasm"
			},
			{
				"language": "z80-asm"
			},
			{
				"language": "zeus-asm"
			},
			{
				"language": "gbz80"
			},
			{
				"language": "pasmo"
			}
		],
		"commands": [
			{
				"command": "dezog.movePCtoCursor",
				"title": "Move Program Counter to Cursor",
				"category": "dezog"
			},
			{
				"command": "dezog.clearAllDecorations",
				"title": "Clear all decorations",
				"category": "dezog"
			},
			{
				"command": "dezog.runAllUnitTests",
				"title": "Run all unit tests",
				"category": "dezog"
			},
			{
				"command": "dezog.debugAllUnitTests",
				"title": "Run all unit tests in debug mode",
				"category": "dezog"
			},
			{
				"command": "dezog.getAllUnitTests",
				"title": "Get all unit test case labels.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.initUnitTests",
				"title": "Initializes partial unit testing.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.execUnitTestCase",
				"title": "(Delayed) execution of one unit test case.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.runPartialUnitTests",
				"title": "Run all unit test cases (from execUnitTestCase).",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.debugPartialUnitTests",
				"title": "Run all unit test cases (from execUnitTestCase) in debug mode.",
				"category": "dezog-partial-unit-testing"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "dezog.runAllUnitTests"
				},
				{
					"command": "dezog.debugAllUnitTests"
				},
				{
					"command": "dezog.movePCtoCursor",
					"when": "false"
				},
				{
					"command": "dezog.clearAllDecorations"
				},
				{
					"command": "dezog.getAllUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.execUnitTestCase",
					"when": "false"
				},
				{
					"command": "dezog.debugPartialUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.runPartialUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.initUnitTests",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"when": "resourceLangId == asm-collection && inDebugMode",
					"command": "dezog.movePCtoCursor",
					"group": "debug"
				}
			]
		},
		"debuggers": [
			{
				"type": "dezog",
				"label": "DeZog",
				"program": "./out/emuldebugadapter.js",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"required": [
							"remoteType",
							"rootFolder",
							"listFiles"
						],
						"properties": {
							"remoteType": {
								"type": "string",
								"description": "It is possible to use DeZog with different remotes. Here you choose the type, i.e. 'zrcp' (ZEsarUX), 'serial' or 'zxsim' (internal Z80 simulator). Note: Certain features or properties are not available in all types.",
								"default": "zrcp"
							},
							"zrcp": {
								"hostname": {
									"type": "string",
									"description": "The hostname/IP address of the ZEsarUX Emulator."
								},
								"port": {
									"type": "number",
									"description": "The port of the ZEsarUX Emulator."
								},
								"loadDelay": {
									"type": "number",
									"description": "An additional delay before the assembler program is loaded in ZEsarUX. Use this only if you have problems starting the debug session on Windows. Default: 100ms on Windows, 0ms on other systems."
								},
								"socketTimeout": {
									"type": "number",
									"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
								}
							},
							"cspect": {
								"hostname": {
									"type": "string",
									"description": "The hostname/IP address of the CSpect socket."
								},
								"port": {
									"type": "number",
									"description": "The port of the CSpect socket."
								},
								"socketTimeout": {
									"type": "number",
									"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
								}
							},
							"zsim": {
								"loadZxRom": {
									"type": "boolean",
									"description": "Loads the 48K Spectrum ROM (or the 128K Spectrum ROM) at start. Otherwise the memory 0-0x3FFF is empty RAM.",
									"default": true
								},
								"zxKeyboard": {
									"type": "boolean",
									"description": "If enabled the simulator shows a keyboard to simulate keypresses.",
									"default": true
								},
								"visualMemory": {
									"type": "string",
									"description": "If enabled the simulator shows the access to the memory (0-0xFFFF) visually while the program is running.\nDifferent views are possible:\n- 'none': no view\n- '64K': One memory area of 64K, no banks.\n- 'ZX48': ROM and RAM as of the ZX Spectrum 48K.\n- 'ZX128': Banked memory as of the ZX Spectrum 48K (16k slots/banks).\n- 'ZXNEXT': Banked memory as of the ZX Next (8k slots/banks). The default depends on the banking settings.",
									"default": "ZX48"
								},
								"ulaScreen": {
									"type": "boolean",
									"description": "If enabled it shows the contents of the ZX Spectrum screen.",
									"default": true
								},
								"memoryPagingControl": {
									"type": "boolean",
									"description": "If enabled the ZX 128K memory banks can be paged in. Use this to simulate a ZX 128K.",
									"default": false
								},
								"tbblueMemoryManagementSlots": {
									"type": "boolean",
									"description": "If enabled the ZX Next memory banking is enabled through registers 0x50-0x57.",
									"default": false
								},
								"cpuLoadInterruptRange": {
									"type": "number",
									"description": "The number of interrupts to calculate the CPU-load average from. 0 to disable.",
									"default": 1
								},
								"Z80N": {
									"type": "boolean",
									"description": "Default is false. If enabled the Z80N extended instructions are supported. Default: If 'tbblueMemoryManagementSlots' defaults to true, otherwise false.",
									"default": false
								},
								"vsyncInterrupt": {
									"type": "boolean",
									"description": "Default is true if some ZX Spectrum feature is enabled otherwise false. If enabled an interrupt is generated after ca. 20ms (this assumes a CPU clock of 3.5MHz).",
									"default": false
								}
							},
							"serial": {
								"baudrate": {
									"type": "number",
									"description": "The baudrate. Note: If you change the baudrate here you also need to change the baudrate at the remote.",
									"default": 230400
								},
								"port": {
									"type": "string",
									"description": "The COM port. Nowadays this is normally USB/serial connection. E.g. /dev/tty.usbserial-#### on a Mac or COM1/COM2 etc. on Windows.",
									"default": "/dev/tty.usbserial"
								}
							},
							"unitTests": {
								"type": "boolean",
								"description": "Whether the configuration contains the unit tests or not. Default: false."
							},
							"rootFolder": {
								"type": "string",
								"description": "The path of the root folder. All other paths are relative to this. Usually set to ${workspaceFolder}."
							},
							"listFiles": {
								"type": "array",
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"items": {
									"anyOf": [
										{
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										{
											"type": "object",
											"properties": {
												"path": {
													"type": "string",
													"description": "Path to the assembler .list file."
												},
												"mainFile": {
													"type": "string",
													"description": "Path to the main assembler source file that was used to produce the .list file. For 'z80asm' the name is extracted automatically (i.e. not needed), for 'sjasmplus' and 'z88dk' you can provide the source file name here.",
													"default": null
												},
												"srcDirs": {
													"type": "array",
													"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here either as an array of strings. All dirs are relative to the 'rootFolder'.",
													"default": [
														""
													]
												},
												"filter": {
													"type": "string",
													"description": "You can add a filter with a regular expression here. On reading of the .list file the regular expression is applied on every line. This can be used e.g. to turn a list file of an unsupported assembler into a format that is understood by dezog. Can be omitted.\nExample: '/^[0-9]+\\s+//'. The line number at the start of each line is deleted.\nIs not required for 'z80asm', 'sjasmplus' or 'z88dk'.",
													"default": null
												},
												"asm": {
													"type": "string",
													"description": "The used assembler. 'sjasmplus' (default), 'z80asm' or 'z88dk'.",
													"default": "z80asm"
												},
												"addOffset": {
													"type": "number",
													"description": "To add an offset to each address in the .list file. Could be used if the addresses in the list file do not start at the ORG.",
													"default": 0
												},
												"z88dkMapFile": {
													"type": "string",
													"description": "Is required only for z88dk. The map file is required to correctly parse the label values and to get correct file/line to address associations.",
													"default": 0
												}
											}
										}
									]
								}
							},
							"smallValuesMaximum": {
								"type": "number",
								"description": "Interprets labels as address if value is bigger. Typically this is e.g. 512. So all numbers below are not treated as addresses if shown. So most constant values are covered with this as they are usually smaller than 512. Influences the formatting.",
								"default": 512
							},
							"disassemblerArgs": {
								"description": "Arguments passed to the disassembler.",
								"properties": {
									"esxdosRst": {
										"type": "boolean",
										"description": "For esxdos disassembly set this to 'true'."
									}
								}
							},
							"tmpDir": {
								"type": "string",
								"description": "A directory for temporary files created by this debug adapter. Used e.g. for disassemblies. E.g. '.tmp'"
							},
							"topOfStack": {
								"type": "string",
								"description": "(Optional) You should set this to the label or address which is above the topmost entry on the stack. It is used to determine the end of the call stack."
							},
							"execAddress": {
								"type": "string",
								"description": "The start address of program execution. Use a label or a number. Can only be omitted of a .sna file is loaded."
							},
							"load": {
								"type": "string",
								"description": "(Optional) Load a .tap or .sna file into the emulator on startup of the debug session."
							},
							"loadObjs": {
								"type": "array",
								"description": "List of one or many object files, i.e. memory dumps. (Optional)",
								"items": {
									"type": "object",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the object file (.o/.obj) file."
										},
										"start": {
											"type": "string",
											"description": "The start address, e.g. 32768. Defaults to 0."
										}
									}
								}
							},
							"startAutomatically": {
								"type": "boolean",
								"description": "Start automatically after launch. Default is false."
							},
							"resetOnLaunch": {
								"type": "boolean",
								"description": "Resets the cpu (on emulator) after starting the debugger before starting the program to debug."
							},
							"commandsAfterLaunch": {
								"type": "array",
								"description": "An array with commands that are executed after the program-to-debug is loaded. With '-e' or '-exec' you can pass commands to the debugger directly.",
								"items": {
									"type": "string"
								}
							},
							"skipInterrupt": {
								"type": "boolean",
								"description": "Skips the interrupt during stepping."
							},
							"history": {
								"reverseDebugInstructionCount": {
									"type": "number",
									"description": "Sets the number of instructions for reverse debugging. If set to 0 then reverse debugging is turned off. Default is 10000."
								},
								"spotCount": {
									"type": "number",
									"description": "Sets the number of instructions to show in a spot. If you set this e.g. to 5 then the 5 previous and the 5 next instructions related to the current position are shown. Use 0 to disable. Default is 10."
								},
								"codeCoverageEnabled": {
									"type": "boolean",
									"description": "Enables/disables code coverage. Default is 'true."
								}
							},
							"formatting": {
								"registerVarFormat": {
									"type": "array",
									"description": "Defines the formatting of the registers when displayed in the VARIABLES area. E.g. as hex value or as integer. Also allows to display labels and various other formats. Use:\n${name} = the name of the register, e.g. HL\n${hex} = value as hex, e.g. A9F5\n${dhex} = value as hex with space between bytes, e.g. A9 F5\n${unsigned} = value as unsigned, e.g. 1234\n$(signed) = value as signed, e.g. -59\n$(bits) = value as bits , e.g. 10011011\n$(flags) = value interpreted as status flags (only useful for F and F'), e.g. ZNC\n${labels} = value as label (or several labels)\n{labelsplus} = value as label (or several labels) plus an index/offset\n${pre:labels:join} = value as label (or several labels). If no label is found nothing is printed. If at least 1 label is found the 'pre' string is printed followed by the label(s). If more than 1 label is found they are concatenated with the 'join' string.\n${b@:...} = This prefix to hex, unsigned, signed or bits allows to show the memory content of the value, i.e. it uses the value as address and shows it's contents. E.g. you can use ${b@:bits} to show the memory contents of the address the register is pointing at as a bit value.",
									"items": {
										"type": "string"
									}
								},
								"registerHoverFormat": {
									"type": "array",
									"description": "see registerVarFormat. Format when hovering over a register",
									"items": {
										"type": "string"
									}
								},
								"arrayByteFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for BYTEs in the WATCHES area and when hovering."
								},
								"arrayWordFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for WORDs in the WATCHES area and when hovering."
								},
								"stackVarFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the pushed values in the STACK area."
								}
							},
							"memoryViewer": {
								"addressColor": {
									"type": "string",
									"description": "The text color of the address field."
								},
								"bytesColor": {
									"type": "string",
									"description": "The color of the bytes shown in hex."
								},
								"asciiColor": {
									"type": "string",
									"description": "The text color of the ascii field."
								},
								"addressHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the address when hovering."
								},
								"valueHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the value when hovering."
								},
								"registerPointerColors": {
									"type": "array",
									"description": "An array with register/color pairs. All selected register will appear with the correspondent color in the memory view. Registers not chosen will not appear.",
									"items": [
										{
											"type": "string"
										},
										{
											"type": "string"
										}
									],
									"default": [
										"HL",
										"darkgreen",
										"DE",
										"darkcyan",
										"BC",
										"dimgray",
										"IX",
										"darkorange",
										"IY",
										"darkviolet"
									]
								},
								"registersMemoryView": {
									"type": "array",
									"description": "An array of register to show in the register memory view. This view is automatically opened at startup and shows the memory the registers point to. E.g. [ 'HL', 'DE', 'IX' ].",
									"items": {
										"type": "string"
									},
									"default": [
										"HL",
										"DE",
										"BC",
										"IX",
										"IY"
									]
								}
							},
							"unitTestTimeout": {
								"type": "number",
								"description": "(Optional) The timeout for unit tests. If a test lasts longer it is assumed as failed. In secs. Default = 5s."
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "DeZog: Launch",
						"description": "Configuration for DeZog.",
						"body": {
							"type": "dezog",
							"request": "launch",
							"name": "DeZog",
							"remoteType": "zsim",
							"zrcp": {
								"port": 10000
							},
							"cspect": {
								"port": 10000
							},
							"zsim": {
								"machine": "loadZxRom"
							},
							"serial": {
								"baudrate": 230400,
								"port": "/dev/tty.usbserial"
							},
							"topOfStack": "stack_top",
							"listFiles": [
								{
									"path": "path_to_your_assembler_file.list"
								}
							],
							"disassemblerArgs": {
								"esxdosRst": true
							},
							"load": "path_to_your_sna_file.sna",
							"skipInterrupt": true,
							"codeCoverage": false
						}
					}
				]
			}
		]
	}
}
